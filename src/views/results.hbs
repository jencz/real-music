{{> Header }}

{{#if songs}}
<div id="results-header">
    <p id="header-title">Title</p>
    <p id="header-artist">Artist</p>
    <p id="header-album">Album</p>
</div>
<div id="results-div">
    <ul>
        {{#each songs}}
        <li class="track-result" id="{{this.props.trackId}}">
            <div id="album-container">
                <img src="{{this.props.artworkUrl}}" id="album-image">
                <img src="/images/play-button.png" id="play-button" class="play">
            </div>
            <p id="song-title">{{this.props.songTitle}}</p>
            <p id="artist-name">{{this.props.artistName}}</p>
            <p id="album-name">{{this.props.albumName}}</p>
            <div class="context-menu-container">
                <img src="/images/three-white-dots.png" class="three-dots">
                <div class="context-menu">
                    <div id="ul">
                        <div class="like-song" onclick="likeSong(this, '{{this.props.trackId}}')">
                            <img src="/images/heart-white.png" class="heart-image">
                            <p>Like song</p>
                        </div>
                        <div class="add-playlist" onclick="addToPlaylist('{{this.props.trackId}}', '{{this.props.songTitle}}', '{{this.props.artistName}}')">
                            <img src="/images/plus-white.png">
                            <p>Add to playlist</p>
                        </div>
                        <div id="goto-artist">
                            <img src="/images/artist-white.png">
                            <p>Go to artist</p>
                        </div>
                    </div>
                </div>
            </div>
            <audio id="song-audio" src="{{this.props.previewUrl}}"></audio>
        </li>
        {{/each}}
    </ul>
</div>
{{/if}}
<script>
    let playButtons = document.querySelectorAll('.play')

    playButtons.forEach((playButton)=> {
        playButton.addEventListener('click', ()=> {
            let playing = false
            let audio = document.getElementById('song-audio')
    
            if (playing === false) {
                audio.play()
                playing = true
            }
            else {
                audio.pause()
                playing = false
            }
        })
    })
    document.querySelectorAll('.three-dots').forEach(threeDots => {
    threeDots.addEventListener('click', (event) => {
        // Hide all context menus except the one clicked
        document.querySelectorAll('.context-menu').forEach(menu => {
            if (menu !== event.currentTarget.nextElementSibling) {
                menu.style.display = 'none';

    
            }
        });
    });

    document.querySelectorAll('.three-dots').forEach(threeDots => {
        threeDots.addEventListener('click', (event) => {
            document.querySelectorAll('.context-menu').forEach(menu => {
                if (menu !== event.currentTarget.nextElementSibling) {
                    menu.style.display = 'none';
                }
            });
            const contextMenu = event.currentTarget.nextElementSibling;
            contextMenu.style.display = contextMenu.style.display === 'block' ? 'none' : 'block';
        });
    });

    document.addEventListener('click', (event) => {
        if (!event.target.matches('.three-dots')) {
            document.querySelectorAll('.context-menu').forEach(menu => {
                menu.style.display = 'none';
            });
        }
    });

    let liked = false;
    async function likeSong(clickedDiv, trackId) {
        let img = clickedDiv.querySelector('.heart-image');
        let userId = 1; // Replace with actual user ID

        if (!liked) {
            img.src = '/images/heart-green.png';
            liked = true;
            await fetch('/liked-songs', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ userId, trackId })
            });
        } else {
            img.src = '/images/heart-white.png';
            liked = false;
            await fetch('/liked-songs', {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ userId, trackId })
            });
        }
    }

    async function addToPlaylist(trackId, songTitle, artistName) {
        let userId = 1; // Replace with actual user ID
        let playlistId = 1; // Replace with actual playlist ID

        await fetch('/add-song-to-playlist', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ userId, playlistId, trackId, songTitle, artistName })
        });
    }
</script>
{{> Footer }}
